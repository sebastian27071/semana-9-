MAIN

import java.util.Scanner;

public class Ejercicio4 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ListaDoblementeEnlazada lista = new ListaDoblementeEnlazada();
        
        System.out.println("=== SISTEMA INTERACTIVO LISTA DOBLEMENTE ENLAZADA ===");
        
        System.out.println("\nCrear lista inicial:");
        System.out.print("Cuantos valores desea ingresar? ");
        int n = scanner.nextInt();
        
        if (n > 0) {
            System.out.println("Ingrese los valores:");
            for (int i = 0; i < n; i++) {
                System.out.print("Valor " + (i + 1) + ": ");
                int valor = scanner.nextInt();
                lista.insertarFinal(valor);
            }
        } else {
            System.out.println("No se ingresaron valores. La lista está vacía.");
        }
        
        System.out.println("\nLista creada:");
        lista.recorrerAdelante();
        
        int opcion;
        do {
            System.out.println("\n--- MENU DE OPERACIONES ---");
            System.out.println("1. Insertar valor antes de otro");
            System.out.println("2. Eliminar valor");
            System.out.println("3. Recorrer hacia adelante");
            System.out.println("4. Recorrer en reversa");
            System.out.println("5. Mostrar informacion de la lista");
            System.out.println("6. Salir");
            System.out.print("Seleccione una opcion: ");
            opcion = scanner.nextInt();
            
            switch (opcion) {
                case 1:
                    System.out.print("Ingrese el valor a insertar: ");
                    int valorInsertar = scanner.nextInt();
                    System.out.print("Ingrese el valor antes del cual insertar: ");
                    int valorBuscar = scanner.nextInt();
                    lista.insertarAntesDe(valorBuscar, valorInsertar);
                    lista.recorrerAdelante();
                    break;
                    
                case 2:
                    System.out.print("Ingrese el valor a eliminar: ");
                    int valorEliminar = scanner.nextInt();
                    lista.eliminar(valorEliminar);
                    lista.recorrerAdelante();
                    break;
                    
                case 3:
                    lista.recorrerAdelante();
                    break;
                    
                case 4:
                    lista.recorrerReversa();
                    break;
                    
                case 5:
                    System.out.println("Tamaño de la lista: " + lista.obtenerTamano() + " elementos");
                    System.out.println("Estado: " + (lista.estaVacia() ? "Vacía" : "Con elementos"));
                    System.out.print("Contenido: ");
                    lista.recorrerAdelante();
                    break;
                    
                case 6:
                    System.out.println("Saliendo del sistema...");
                    break;
                    
                default:
                    System.out.println("Opcion no valida");
            }
            
        } while (opcion != 6);
        
        scanner.close();
    }
}


CLASE NODO 

public class Nodo {
    public int valor;
    public Nodo anterior;
    public Nodo siguiente;
    
    public Nodo(int valor) {
        this.valor = valor;
        this.anterior = null;
        this.siguiente = null;
    }
    
    @Override
    public String toString() {
        return "[" + valor + "]";
    }
}


CLASE LISTAS DOBLEMENTE ENLAZADAS 


public class ListaDoblementeEnlazada {
    private Nodo cabeza;
    private Nodo cola;
    
    public ListaDoblementeEnlazada() {
        this.cabeza = null;
        this.cola = null;
    }
    
    public void insertarFinal(int valor) {
        Nodo nuevoNodo = new Nodo(valor);
        if (cabeza == null) {
            cabeza = nuevoNodo;
            cola = nuevoNodo;
        } else {
            cola.siguiente = nuevoNodo;
            nuevoNodo.anterior = cola;
            cola = nuevoNodo;
        }
        System.out.println("Valor " + valor + " insertado correctamente");
    }
    
    public void insertarAntesDe(int valorBuscar, int valorInsertar) {
        if (cabeza == null) {
            System.out.println("La lista está vacía");
            return;
        }
        
        Nodo actual = cabeza;
        while (actual != null) {
            if (actual.valor == valorBuscar) {
                Nodo nuevoNodo = new Nodo(valorInsertar);
                
                if (actual.anterior == null) {
                    nuevoNodo.siguiente = cabeza;
                    cabeza.anterior = nuevoNodo;
                    cabeza = nuevoNodo;
                } else {
                    nuevoNodo.siguiente = actual;
                    nuevoNodo.anterior = actual.anterior;
                    actual.anterior.siguiente = nuevoNodo;
                    actual.anterior = nuevoNodo;
                }
                System.out.println("Valor " + valorInsertar + " insertado antes de " + valorBuscar);
                return;
            }
            actual = actual.siguiente;
        }
        System.out.println("Valor " + valorBuscar + " no encontrado");
    }
    
    public void eliminar(int valor) {
        if (cabeza == null) {
            System.out.println("La lista está vacía");
            return;
        }
        
        Nodo actual = cabeza;
        while (actual != null) {
            if (actual.valor == valor) {
                if (actual.anterior == null && actual.siguiente == null) {
                    cabeza = null;
                    cola = null;
                } else if (actual.anterior == null) {
                    cabeza = actual.siguiente;
                    cabeza.anterior = null;
                } else if (actual.siguiente == null) {
                    cola = actual.anterior;
                    cola.siguiente = null;
                } else {
                    actual.anterior.siguiente = actual.siguiente;
                    actual.siguiente.anterior = actual.anterior;
                }
                System.out.println("Valor " + valor + " eliminado");
                return;
            }
            actual = actual.siguiente;
        }
        System.out.println("Valor " + valor + " no encontrado");
    }
    
    public void recorrerAdelante() {
        Nodo actual = cabeza;
        if (actual == null) {
            System.out.println("La lista está vacía");
            return;
        }
        
        System.out.print("Recorrido hacia adelante: ");
        while (actual != null) {
            System.out.print(actual);
            if (actual.siguiente != null) {
                System.out.print(" = ");
            }
            actual = actual.siguiente;
        }
        System.out.println();
    }
    
    public void recorrerReversa() {
        Nodo actual = cola;
        if (actual == null) {
            System.out.println("La lista está vacía");
            return;
        }
        
        System.out.print("Recorrido en reversa: ");
        while (actual != null) {
            System.out.print(actual);
            if (actual.anterior != null) {
                System.out.print(" = ");
            }
            actual = actual.anterior;
        }
        System.out.println();
    }
    
    public boolean estaVacia() {
        return cabeza == null;
    }
    
    public int obtenerTamano() {
        int contador = 0;
        Nodo actual = cabeza;
        while (actual != null) {
            contador++;
            actual = actual.siguiente;
        }
        return contador;
    }
}
