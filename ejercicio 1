MAIN 

import java.util.Scanner;

/**
 *
 * @author ESTUDIANTE
 */
public class Ejercicio1 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ListaDoblementeEnlazada lista = new ListaDoblementeEnlazada();
        
        // Crear lista inicial: [3] = [7] = [9] = [12] = [15]
        System.out.println("Creando lista inicial: [3] = [7] = [9] = [12] = [15]");
        lista.insertarFinal(3);
        lista.insertarFinal(7);
        lista.insertarFinal(9);
        lista.insertarFinal(12);
        lista.insertarFinal(15);
        
        lista.recorrerAdelante();
        
        // Operaciones solicitadas
        System.out.println("\n--- Operaciones ---");
        
        System.out.println("1. Insertar valor 10 antes del nodo con valor 12");
        lista.insertarAntesDe(12, 10);
        lista.recorrerAdelante();
        
        System.out.println("\n2. Eliminar nodo con valor 7");
        lista.eliminar(7);
        lista.recorrerAdelante();
        
        System.out.println("\n3. Recorrer lista en reversa");
        lista.recorrerReversa();
        
        scanner.close();
    }
}

CLASE LISTAS DOBLEMENTE ENLAZADAS 

class ListaDoblementeEnlazada {
    private Nodo cabeza;
    private Nodo cola;
    
    public ListaDoblementeEnlazada() {
        this.cabeza = null;
        this.cola = null;
    }
    
    public void insertarFinal(int valor) {
        Nodo nuevoNodo = new Nodo(valor);
        if (cabeza == null) {
            cabeza = nuevoNodo;
            cola = nuevoNodo;
        } else {
            cola.siguiente = nuevoNodo;
            nuevoNodo.anterior = cola;
            cola = nuevoNodo;
        }
    }
    
    public void insertarAntesDe(int valorBuscar, int valorInsertar) {
        Nodo actual = cabeza;
        while (actual != null) {
            if (actual.valor == valorBuscar) {
                Nodo nuevoNodo = new Nodo(valorInsertar);
                
                if (actual.anterior == null) { 
                    nuevoNodo.siguiente = cabeza;
                    cabeza.anterior = nuevoNodo;
                    cabeza = nuevoNodo;
                } else {
                    nuevoNodo.siguiente = actual;
                    nuevoNodo.anterior = actual.anterior;
                    actual.anterior.siguiente = nuevoNodo;
                    actual.anterior = nuevoNodo;
                }
                System.out.println("Valor " + valorInsertar + " insertado antes de " + valorBuscar);
                return;
            }
            actual = actual.siguiente;
        }
        System.out.println("Valor " + valorBuscar + " no encontrado");
    }
 
    public void eliminar(int valor) {
        Nodo actual = cabeza;
        while (actual != null) {
            if (actual.valor == valor) {
                if (actual.anterior == null) { 
                    cabeza = actual.siguiente;
                    if (cabeza != null) {
                        cabeza.anterior = null;
                    }
                    cola = actual.anterior;
                    cola.siguiente = null;
                } else { 
                    actual.anterior.siguiente = actual.siguiente;
                    actual.siguiente.anterior = actual.anterior;
                }
                System.out.println("Valor " + valor + " eliminado");
                return;
            }
            actual = actual.siguiente;
        }
        System.out.println("Valor " + valor + " no encontrado");
    }
    
    public void recorrerAdelante() {
        Nodo actual = cabeza;
        System.out.print("Recorrido hacia adelante: ");
        while (actual != null) {
            System.out.print("[" + actual.valor + "]");
            if (actual.siguiente != null) {
                System.out.print(" = ");
            }
            actual = actual.siguiente;
        }
        System.out.println();
    }

    public void recorrerReversa() {
        Nodo actual = cola;
        System.out.print("Recorrido en reversa: ");
        while (actual != null) {
            System.out.print("[" + actual.valor + "]");
            if (actual.anterior != null) {
                System.out.print(" = ");
            }
            actual = actual.anterior;
        }
        System.out.println();
    }
}

CLASE NODO 


class Nodo {
    int valor;
    Nodo anterior;
    Nodo siguiente;
    
    public Nodo(int valor) {
        this.valor = valor;
        this.anterior = null;
        this.siguiente = null;
    }
}
